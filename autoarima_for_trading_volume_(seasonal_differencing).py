# -*- coding: utf-8 -*-
"""AutoARIMA_for_Trading_Volume_(Seasonal_Differencing).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jcpcc0-gDqwU2mBqzh5ZU_Zim1O16Q7g
"""

from statsmodels.tsa.stattools import adfuller
from numpy import log
import pandas.util.testing as tm
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler, LabelEncoder

from google.colab import files
uploaded = files.upload()
import io
df = pd.read_csv(io.BytesIO(uploaded['ford.csv']),encoding = 'unicode escape')

result = adfuller(df["Volume"].dropna())
print('ADF Statistic : %f' % result[0])
print('p-value %f' % result[1])

# Hypothesis test : 
#p1 : Time is stationary.   
#p2  : Time is not stationary.  
#test condition : p-value<0.05,    since p value <0.05, we go with the fact that time is stationary.

label_quality = LabelEncoder()
df['CBB'] = label_quality.fit_transform(df['CBB'])
df

df.head()

#Finding order of AR Term (p)
#Partial correlation

# PACF plot of 1st differenced series
plt.rcParams.update({'figure.figsize':(9,3), 'figure.dpi':120})

fig, axes = plt.subplots(1, 2, sharex=True)
axes[0].plot(df["Volume"].diff()); axes[0].set_title('1st Differencing')
axes[1].set(ylim=(0,5))
plot_pacf(df["Volume"].diff().dropna(), ax=axes[1])

plt.show()

# We next find MA which is the error of the lagged forecast. 
#The ACF tells how many MA terms are required to remove any autocorrelation in the stationarized series.

import matplotlib.pyplot as plt
plt.rcParams.update({'figure.figsize':(9,3), 'figure.dpi':120})

fig, axes = plt.subplots(1, 2, sharex=True)
axes[0].plot(df["Volume"].diff()); axes[0].set_title('1st Differencing')
axes[1].set(ylim=(0,1.2))
plot_acf(df["Volume"].diff().diff().dropna(), ax=axes[1])

plt.show()

#Building the ARIMA Model

from statsmodels.tsa.arima_model import ARIMA

# 2,1,1 ARIMA Model
model = ARIMA(df["Volume"], order=(2,1,1))
model_fit = model.fit(disp=0)
print(model_fit.summary())

#plotting for actual vs fitted variance

model_fit.plot_predict(dynamic = False)
plt.show()

from statsmodels.tsa.stattools import acf

# Create Training and Test
train = df['Volume'][:159]
test = df['Volume'][160:]

import pmdarima as pm

# Seasonal - fit stepwise auto-ARIMA
ar_model = pm.auto_arima(df["Volume"], start_p=1, start_q=1,
                         test='adf',
                         max_p=3, max_q=3, m=12,
                         start_P=0, seasonal=True,
                         d=None, D=1, trace=True,
                         error_action='ignore',  
                         suppress_warnings=True, 
                         stepwise=True)

ar_model.summary()

pred = pd.DataFrame(ar_model.predict(n_periods = 66),index = test.index)
pred.columns = ['Predicted Volume']
pred

plt.figure(figsize=(10,10))

plt.plot(train,label="Trained Values")
plt.plot(test,label = "Predicted")
plt.plot(pred,label = "Test")
plt.legend(loc = "upper right")

plt.show()

fig, axes = plt.subplots(2, 1, figsize=(8,8), dpi=100, sharex=True)

# Usual Differencing
axes[0].plot(df["Volume"], label='Original Series')
axes[0].plot(df["Volume"].diff(1), label='Usual Differencing')
axes[0].set_title('Usual Differencing')
axes[0].legend(loc='upper left', fontsize=6)


# Seasinal Dei
axes[1].plot(df["Volume"], label='Original Series')
axes[1].plot(df["Volume"].diff(12), label='Seasonal Differencing', color='green')
axes[1].set_title('Seasonal Differencing')
plt.legend(loc='upper left', fontsize=6)
plt.suptitle('a10 - Drug Sales', fontsize=16)
plt.show()

from sklearn import metrics